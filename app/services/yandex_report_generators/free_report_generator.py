from typing import List, Dict, Optional, Literal
from loguru import logger

from app.database.models.report import Report
from app.schemas.report import ReportData
from app.core.constants import (
    FREE_METRICS,
    FREE_ATTRIBUTES_MAPPING,
    FREE_METRIC_NAMES,
)
from .base import BaseReportGenerator


class FreeReportGenerator(BaseReportGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (–æ—Ä–≥–∞–Ω–∏–∫–∞)"""

    def __init__(self, metrika_client, yandex_metrika_integration):
        super().__init__(metrika_client, yandex_metrika_integration)
        self.include_ad: bool = False

    def get_base_metrics(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return FREE_METRICS.copy()

    def get_attributes_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫–∞–º –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return FREE_ATTRIBUTES_MAPPING.copy()

    def get_metric_names(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return FREE_METRIC_NAMES.copy()

    def get_traffic_type(self) -> Literal["paid", "free"]:
        """–¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π"""
        return "free"

    def get_main_dimensions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return ["ym:s:lastSignTrafficSource"]

    def get_detail_dimensions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π - –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–Ω—É—Ç—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return ["ym:s:lastSignSourceEngine"]

    def _get_main_header_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"""
        return "–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞"

    def _get_main_filters(self) -> Optional[str]:
        """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (–µ—Å–ª–∏ include_ad=False)"""
        return None if self.include_ad else "ym:s:lastSignTrafficSource!='ad'"

    def _build_detail_filter(self, main_id: str) -> Optional[str]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        return f"ym:s:lastSignTrafficSource=='{main_id}'"

    async def generate_report(self, report: Report) -> Optional[ReportData]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        await self._log_generation_start(report)

        try:
            # –î–ª—è source == "all" –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –≤ —Ä–∞–∑—Ä–µ–∑–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            self.include_ad = report.source == "all"

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π
            goal_metrics, goal_names = await self._get_goal_metrics_and_names(report)
            logger.info(f"üîπ Found {len(goal_metrics)} goal metrics")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            selected_metrics = self._build_selected_metrics(report, goal_metrics)
            logger.info(f"üîπ Total metrics to fetch: {len(selected_metrics)}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            headers, rows = await self._process_hierarchical_data(
                report, selected_metrics, goal_names
            )

            logger.info(
                f"üîπ Generated report with {len(headers)} columns and {len(rows)} rows"
            )

            result = ReportData(headers=headers, rows=rows, meta_data=[])

            await self._log_generation_complete(report, True)
            return result

        except Exception as e:
            logger.error(f"üîπ Error generating free report: {str(e)}")
            await self._log_generation_complete(report, False)
            return None
