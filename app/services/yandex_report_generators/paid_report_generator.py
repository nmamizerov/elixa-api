from typing import List, Dict, Optional, Literal
from loguru import logger

from app.database.models.report import Report
from app.schemas.report import ReportData
from app.core.constants import (
    PAID_METRICS,
    PAID_ATTRIBUTES_MAPPING,
    PAID_METRIC_NAMES,
)
from .base import BaseReportGenerator


class PaidReportGenerator(BaseReportGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (—Ä–µ–∫–ª–∞–º–∞)"""

    def get_base_metrics(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return PAID_METRICS.copy()

    def get_attributes_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫–∞–º –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return PAID_ATTRIBUTES_MAPPING.copy()

    def get_metric_names(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        return PAID_METRIC_NAMES.copy()

    def get_traffic_type(self) -> Literal["paid", "free"]:
        """–¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ - –ø–ª–∞—Ç–Ω—ã–π"""
        return "paid"

    def get_main_dimensions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π - —Ç–∏–ø—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º DirectPlatformType"""
        return ["ym:ad:CROSS_DEVICE_LAST_SIGNIFICANTDirectPlatformType"]

    def get_detail_dimensions(self) -> List[str]:
        """–î–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞"""
        return []

    def _get_main_header_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"""
        return "–¢–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"

    def _get_main_filters(self) -> Optional[str]:
        """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è - –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        return None

    def _build_detail_filter(self, main_id: str) -> Optional[str]:
        """–î–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞"""
        return None

    async def generate_report(self, report: Report) -> Optional[ReportData]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        await self._log_generation_start(report)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –î–∏—Ä–µ–∫—Ç–∞
            clients_data = await self.metrika_client.get_clients(
                self.yandex_metrika_integration
            )
            if not clients_data or "clients" not in clients_data:
                logger.warning("üîπ No Direct clients found")
                await self._log_generation_complete(report, False)
                return None

            clients = clients_data["clients"]
            client_logins = [
                str(client["chief_login"])
                for client in clients
                if "chief_login" in client
            ]

            if not client_logins:
                logger.warning("üîπ No Direct client logins found")
                await self._log_generation_complete(report, False)
                return None

            logger.info(f"üîπ Found {len(client_logins)} Direct clients")

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π
            goal_metrics, goal_names = await self._get_goal_metrics_and_names(report)
            logger.info(f"üîπ Found {len(goal_metrics)} goal metrics")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            selected_metrics = self._build_selected_metrics(report, goal_metrics)
            logger.info(f"üîπ Total metrics to fetch: {len(selected_metrics)}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º
            headers = self._build_main_headers(selected_metrics, goal_names, report)
            rows = []

            platform_types_data = await self.metrika_client.get_metrika_data(
                dimensions=self.get_main_dimensions(),
                metrics=selected_metrics,
                date_1=report.date_1,
                date_2=report.date_2,
                yandexMetrikaIntegration=self.yandex_metrika_integration,
                direct_client_logins=",".join(client_logins),
            )

            if not platform_types_data or not platform_types_data.data:
                logger.error("üîπ No data received from Yandex Metrika for paid traffic")
                await self._log_generation_complete(report, False)
                return None

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–µ—Ç—Ä–∏–∫
            metric_index = {name: idx for idx, name in enumerate(selected_metrics)}

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º
            total_row = None
            for platform_type in platform_types_data.data:
                platform_type_name = platform_type["dimensions"][0]["name"]

                # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
                row = self._build_data_row(
                    platform_type_name,
                    platform_type,
                    selected_metrics,
                    report,
                    metric_index,
                )
                rows.append(row)

                # –°—É–º–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ "–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"
                if total_row is None:
                    total_row = [0] * len(row)
                    total_row[0] = "  –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"  # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ

                # –°—É–º–º–∏—Ä—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                for i in range(1, len(row)):
                    if isinstance(row[i], (int, float)):
                        total_row[i] += row[i]

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –æ–¥–Ω—É —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É
            if total_row:
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                if report.selected_metrics and len(total_row) > 1:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    base_data = self._extract_base_data_from_row(
                        total_row, selected_metrics, report
                    )

                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    calculated_values = self._calculate_metrics_from_base_data(
                        base_data, report
                    )

                    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                    if calculated_values:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                        base_metrics_count = len(selected_metrics) + len(
                            report.selected_attributes
                        )
                        start_idx = 1 + base_metrics_count  # +1 –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞

                        for i, value in enumerate(calculated_values):
                            if start_idx + i < len(total_row):
                                total_row[start_idx + i] = round(value, 2)

                rows = [total_row]

            logger.info(
                f"üîπ Generated report with {len(headers)} columns and {len(rows)} rows"
            )

            result = ReportData(headers=headers, rows=rows, meta_data=[])

            await self._log_generation_complete(report, True)
            return result

        except Exception as e:
            logger.error(f"üîπ Error generating paid report: {str(e)}")
            await self._log_generation_complete(report, False)
            return None

    def _extract_base_data_from_row(
        self, row: List, selected_metrics: List[str], report: Report
    ) -> Dict[str, float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
        base_data = {"cost": 0, "clicks": 0, "visits": 0, "revenue": 0, "goal": 0}

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–Ω–∞–∑–≤–∞–Ω–∏–µ)
        col_idx = 1

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        col_idx += len(report.selected_attributes)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        for metric in selected_metrics:
            if col_idx < len(row) and isinstance(row[col_idx], (int, float)):
                value = row[col_idx]

                if "cost" in metric.lower() or "RUBConvertedAdCost" in metric:
                    base_data["cost"] += value
                elif "clicks" in metric.lower():
                    base_data["clicks"] += value
                elif "visits" in metric.lower() and "goal" not in metric.lower():
                    base_data["visits"] += value
                elif (
                    "revenue" in metric.lower()
                    or "ecommerceRUBConvertedRevenue" in metric
                ):
                    base_data["revenue"] += value
                elif "goal" in metric.lower() and "visits" in metric.lower():
                    base_data["goal"] += value

            col_idx += 1

        return base_data

    def _calculate_metrics_from_base_data(
        self, base_data: Dict[str, float], report: Report
    ) -> List[float]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not report.selected_metrics:
            return []

        calculated = []

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –¥–ª—è CPA/CPO
        goal_achieved = base_data["goal"]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è CPA/CPO, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if ("cpa" in report.selected_metrics and report.cpa_goal) or (
            "cpo" in report.selected_metrics and report.cpo_goal
        ):
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ goal_achieved —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–ª–µ–π
            # –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ü–µ–ª—å
            pass

        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
        from app.core.utils import calculate_metrics

        metrics_result = calculate_metrics(
            cost=base_data["cost"],
            clicks=int(base_data["clicks"]),
            visits=int(base_data["visits"]),
            goal_achieved=int(goal_achieved),
            revenue=base_data["revenue"],
            selected_metrics=report.selected_metrics,
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ –≤ selected_metrics
        for metric in report.selected_metrics:
            value = getattr(metrics_result, metric, 0)
            calculated.append(value or 0)

        return calculated
