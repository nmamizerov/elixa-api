from typing import List, Dict, Optional, Literal
from loguru import logger

from app.database.models.report import Report
from app.schemas.report import ReportData
from app.core.constants import (
    PAID_METRICS,
    PAID_ATTRIBUTES_MAPPING,
    DIRECT_METRIC_NAMES,
)
from .base import BaseReportGenerator


class DirectReportGenerator(BaseReportGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"""

    def __init__(
        self,
        metrika_client,
        yandex_metrika_integration,
        attribution: str = "CROSS_DEVICE_LAST_SIGNIFICANT",
    ):
        super().__init__(metrika_client, yandex_metrika_integration)
        self.attribution = attribution

    def get_base_metrics(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è Direct"""
        return PAID_METRICS.copy()

    def get_attributes_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫–∞–º –¥–ª—è Direct"""
        return PAID_ATTRIBUTES_MAPPING.copy()

    def get_metric_names(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç—Ä–∏–∫ –¥–ª—è Direct"""
        return DIRECT_METRIC_NAMES.copy()

    def get_traffic_type(self) -> Literal["paid", "free"]:
        """–¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ - –ø–ª–∞—Ç–Ω—ã–π (–î–∏—Ä–µ–∫—Ç)"""
        return "paid"

    def get_main_dimensions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π - —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ (–∑–∞–∫–∞–∑—ã)"""
        return [f"ym:ad:{self.attribution}DirectOrder"]

    def get_detail_dimensions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π - –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        return [f"ym:ad:{self.attribution}DirectBannerGroup"]

    def _get_main_header_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"""
        return "–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è/–ì—Ä—É–ø–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"

    def _get_main_filters(self) -> Optional[str]:
        """–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è - –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        return None

    def _build_detail_filter(self, main_id: str) -> Optional[str]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–∞–º–∫–∞—Ö –∫–∞–º–ø–∞–Ω–∏–∏"""
        return f"ym:ad:{self.attribution}DirectOrder=='{main_id}'"

    async def generate_report(self, report: Report) -> Optional[ReportData]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Direct –æ—Ç—á–µ—Ç–∞"""
        await self._log_generation_start(report)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –î–∏—Ä–µ–∫—Ç–∞
            clients_data = await self.metrika_client.get_clients(
                self.yandex_metrika_integration
            )
            if not clients_data or "clients" not in clients_data:
                logger.warning("üîπ No Direct clients found")
                await self._log_generation_complete(report, False)
                return None

            clients = clients_data["clients"]
            client_logins = [
                str(client["chief_login"])
                for client in clients
                if "chief_login" in client
            ]

            if not client_logins:
                logger.warning("üîπ No Direct client logins found")
                await self._log_generation_complete(report, False)
                return None

            logger.info(f"üîπ Found {len(client_logins)} Direct clients")

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π
            goal_metrics, goal_names = await self._get_goal_metrics_and_names(report)
            logger.info(f"üîπ Found {len(goal_metrics)} goal metrics")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            selected_metrics = self._build_selected_metrics(report, goal_metrics)
            logger.info(f"üîπ Total metrics to fetch: {len(selected_metrics)}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º (–∑–∞–∫–∞–∑–∞–º)
            headers = self._build_main_headers(selected_metrics, goal_names, report)
            rows = []

            orders_data = await self.metrika_client.get_metrika_data(
                dimensions=self.get_main_dimensions(),
                metrics=selected_metrics,
                yandexMetrikaIntegration=self.yandex_metrika_integration,
                date_1=report.date_1,
                date_2=report.date_2,
                direct_client_logins=",".join(client_logins),
            )

            if not orders_data or not orders_data.data:
                logger.error(
                    "üîπ No data received from Yandex Metrika for Direct orders"
                )
                await self._log_generation_complete(report, False)
                return None

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–µ—Ç—Ä–∏–∫
            metric_index = {name: idx for idx, name in enumerate(selected_metrics)}

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
            for order in orders_data.data:
                order_name = order["dimensions"][0]["name"]
                order_id = order["dimensions"][0]["id"]

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
                order_row = self._build_data_row(
                    order_name,
                    order,
                    selected_metrics,
                    report,
                    metric_index,
                    is_main=True,
                )
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –¥–∞–Ω–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ)
                formatted_order_row = self._format_row_values_simple(order_row)
                rows.append(formatted_order_row)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
                groups_data = await self.metrika_client.get_metrika_data(
                    dimensions=self.get_detail_dimensions(),
                    metrics=selected_metrics,
                    date_1=report.date_1,
                    yandexMetrikaIntegration=self.yandex_metrika_integration,
                    date_2=report.date_2,
                    filters=self._build_detail_filter(order_id),
                    direct_client_logins=",".join(client_logins),
                )

                if groups_data and groups_data.data:
                    for group in groups_data.data:
                        group_name = group["dimensions"][0]["name"]

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≥—Ä—É–ø–ø—ã —Å –æ—Ç—Å—Ç—É–ø–æ–º
                        group_row = self._build_data_row(
                            f"  {group_name}",
                            group,
                            selected_metrics,
                            report,
                            metric_index,
                            is_main=False,
                        )
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ)
                        formatted_group_row = self._format_row_values_simple(group_row)
                        rows.append(formatted_group_row)
                else:
                    logger.warning(f"üîπ No groups data for order {order_name}")

            logger.info(
                f"üîπ Generated Direct report with {len(headers)} columns and {len(rows)} rows"
            )

            result = ReportData(headers=headers, rows=rows, meta_data=[])

            await self._log_generation_complete(report, True)
            return result

        except Exception as e:
            logger.error(f"üîπ Error generating Direct report: {str(e)}")
            await self._log_generation_complete(report, False)
            return None

    def _format_row_values_simple(self, row: List) -> List:
        """–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π: –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª, —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.
        –î–æ –≤–≤–æ–¥–∞ —Å—Ö–µ–º—ã –∫–æ–ª–æ–Ω–æ–∫.
        """
        formatted_row: List = []
        for i, value in enumerate(row):
            if i == 0:
                formatted_row.append(value)
                continue
            if isinstance(value, float):
                formatted_row.append(round(value, 2))
            else:
                formatted_row.append(value)
        return formatted_row
