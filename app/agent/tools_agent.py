from typing import List, Dict, AsyncGenerator
from langchain_openai import ChatOpenAI
from langchain.agents import create_openai_tools_agent, AgentExecutor
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder

from app.agent.tools.dates_parse_tool import DateParserTool
from app.agent.tools.yandex_metric import YandexMetrikaDataTool
from app.agent.tools.yandex_metric_params import YandexMetrikaParamsTool
from app.agent.tools.google_analytics_data import GoogleAnalyticsDataTool
from app.agent.tools.google_analytics_params import GoogleAnalyticsParamsTool
from app.core.config import settings


class MarketingAgent:
    """Tool-based –∞–≥–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    def __init__(self, yandexMetrikaIntegration=None, googleAnalyticsIntegration=None):
        self.yandexMetrikaIntegration = yandexMetrikaIntegration
        self.googleAnalyticsIntegration = googleAnalyticsIntegration
        self.llm = ChatOpenAI(
            model="gpt-4o-mini", temperature=0.7, openai_api_key=settings.OPENAI_API_KEY
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.tools = [
            DateParserTool(),
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if yandexMetrikaIntegration:
            self.tools.extend(
                [
                    YandexMetrikaParamsTool(),
                    YandexMetrikaDataTool(
                        yandexMetrikaIntegration=yandexMetrikaIntegration
                    ),
                ]
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Google Analytics –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if googleAnalyticsIntegration:
            self.tools.extend(
                [
                    GoogleAnalyticsParamsTool(),
                    GoogleAnalyticsDataTool(
                        googleAnalyticsIntegration=googleAnalyticsIntegration
                    ),
                ]
            )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        self.prompt = ChatPromptTemplate.from_messages(
            [
                ("system", self._get_system_prompt()),
                MessagesPlaceholder(variable_name="chat_history"),
                ("user", "{input}"),
                MessagesPlaceholder(variable_name="agent_scratchpad"),
            ]
        )

        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        self.agent = create_openai_tools_agent(
            llm=self.llm, tools=self.tools, prompt=self.prompt
        )

        # –°–æ–∑–¥–∞–µ–º executor
        self.agent_executor = AgentExecutor(
            agent=self.agent,
            tools=self.tools,
            verbose=True,
            max_iterations=10,
            handle_parsing_errors=True,
        )

    def _get_system_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""

        available_sources = []
        if self.yandexMetrikaIntegration:
            available_sources.append("–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞")
        if self.googleAnalyticsIntegration:
            available_sources.append("Google Analytics")

        sources_text = (
            " –∏ ".join(available_sources)
            if available_sources
            else "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"
        )

        return f"""
        –¢—ã - AI-–∞–≥–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ {sources_text}.
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {sources_text}
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
        2. –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        3. –ü–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
        
        –í–ê–ñ–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –î–ï–ô–°–¢–í–ò–ô:
        1. –í–°–ï–ì–î–ê —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π parse_dates –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        2. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π get_metrika_params (–¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏) –∏–ª–∏ get_ga_params (–¥–ª—è Google Analytics) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        3. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π get_metrika_data –∏–ª–∏ get_ga_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        """

    async def process_message(
        self, user_message: str, chat_history: List[Dict] | None = None
    ) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_history is None:
            chat_history = []

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è LangChain
        formatted_history = []
        for msg in chat_history:
            if msg["role"] == "user":
                formatted_history.append(("user", msg["content"]))
            elif msg["role"] == "assistant":
                formatted_history.append(("assistant", msg["content"]))

        try:
            result = await self.agent_executor.ainvoke(
                {"input": user_message, "chat_history": formatted_history}
            )

            return result["output"]

        except Exception as e:
            return f"–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

    async def stream_message(
        self, user_message: str, chat_history: List[Dict] | None = None
    ) -> AsyncGenerator[Dict, None]:
        """
        –°—Ç—Ä–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

        Yields:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–æ–º —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞–Ω–Ω—ã–º–∏
            - {"type": "start", "message": "–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."}
            - {"type": "thinking", "message": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å..."}
            - {"type": "tool_start", "tool_name": "parse_dates", "message": "–ò–∑–≤–ª–µ–∫–∞—é –¥–∞—Ç—ã..."}
            - {"type": "tool_result", "tool_name": "parse_dates", "result": {...}}
            - {"type": "step", "content": "–ß–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞"}
            - {"type": "final", "content": "–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"}
            - {"type": "error", "message": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"}
        """
        if chat_history is None:
            chat_history = []

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è LangChain
        formatted_history = []
        for msg in chat_history:
            if msg["role"] == "user":
                formatted_history.append(("user", msg["content"]))
            elif msg["role"] == "assistant":
                formatted_history.append(("assistant", msg["content"]))

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            yield {"type": "start", "message": "üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞..."}

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –∞–≥–µ–Ω—Ç–∞
            async for chunk in self.agent_executor.astream(
                {"input": user_message, "chat_history": formatted_history},
                {"metadata": {"stream_mode": "values"}},
            ):

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –æ—Ç –∞–≥–µ–Ω—Ç–∞
                if "messages" in chunk:
                    messages = chunk["messages"]
                    if messages:
                        last_message = messages[-1]

                        if (
                            hasattr(last_message, "tool_calls")
                            and last_message.tool_calls
                        ):
                            for tool_call in last_message.tool_calls:
                                tool_name = tool_call.get("name", "unknown")
                                yield {
                                    "type": "tool_start",
                                    "tool_name": tool_name,
                                    "args": tool_call.get("args", {}),
                                    "message": f"üîß –ò—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}",
                                }

                        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        elif (
                            hasattr(last_message, "type")
                            and last_message.type == "tool"
                        ):
                            tool_name = getattr(last_message, "name", "unknown")
                            yield {
                                "type": "tool_result",
                                "tool_name": tool_name,
                                "message": f"‚úÖ –ü–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {tool_name}",
                            }

                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏
                elif "intermediate_steps" in chunk:
                    steps = chunk["intermediate_steps"]
                    for step in steps:
                        if len(step) >= 2:
                            action, result = step[0], step[1]
                            if hasattr(action, "tool"):
                                yield {
                                    "type": "tool_result",
                                    "tool_name": action.tool,
                                    "message": f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {action.tool} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                                }

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            yield {"type": "thinking", "message": "üéØ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç..."}

            result = await self.agent_executor.ainvoke(
                {"input": user_message, "chat_history": formatted_history}
            )

            yield {"type": "final", "content": result["output"]}

        except Exception as e:
            yield {
                "type": "error",
                "message": f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            }
