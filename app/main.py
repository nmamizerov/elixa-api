from contextlib import asynccontextmanager
from fastapi import FastAPI
from loguru import logger

from app.routers import auth, users, chats, reports, companies, messages, integrations
from app.services.s3_service import s3_service


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle manager –¥–ª—è FastAPI"""
    # Startup
    logger.info("üöÄ Starting Pulse Backend...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3
    from app.core.config import settings

    if settings.S3_ENDPOINT_URL:
        logger.info(f"üîó Using custom S3 endpoint: {settings.S3_ENDPOINT_URL}")
    else:
        logger.info("üîó Using AWS S3")

    s3_available = await s3_service.check_bucket_exists()
    if s3_available:
        logger.info(f"‚úÖ S3 connection successful (bucket: {settings.S3_BUCKET_NAME})")
    else:
        logger.warning("‚ö†Ô∏è S3 connection failed - file uploads may not work")

    yield

    # Shutdown
    logger.info("üì¥ Shutting down Pulse Backend...")


app = FastAPI(
    title="Pulse Backend",
    description="AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏",
    version="0.1.0",
    lifespan=lifespan,
)

app.include_router(auth.router)
app.include_router(users.router)
app.include_router(chats.router)
app.include_router(messages.router)
app.include_router(reports.router)
app.include_router(companies.router)
app.include_router(integrations.router)


@app.get("/")
async def read_root():
    """
    Root endpoint to check if the API is running.
    """
    return {"message": "Pulse Backend is running"}
